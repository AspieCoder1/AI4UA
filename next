a 1) Migliorare grafico: root e ordine rispetto a diversi ordini di entrata nei nodi
! 2) skeleton per fare il disegno?

! 3) fare campionamento per n>=10
! 4) eliminare grafi isomorfi
! 5) crea CSV o JSON (con dizionario; chiave=id grafo + attributo lst(edges))
! 6) crea label distributivo o no
! 7) IMP: trova un modo di non controllare transitività, ma imporla [es del prod righe/colonne]
! 8) checkare reticolo: chekkare operaz

! 9) check nuova classe reticolo
10) join e meet sono matrici simmetriche, sfruttare questo per speed up
11) velocizzare is_isomorphic utilizzando https://pallini.di.uniroma1.it dovrebbe essere molto più veloce ma non so come
      si utilizza
12) diagrammi di Hasse per fare il plot: https://groups.google.com/g/networkx-discuss/c/DpdUIwb6aQ0?pli=1















USEFUL CODES:
-1: https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html
        example:

        from joblib import Parallel, delayed

        Parallel(n_jobs=1)(delayed(sqrt)(i**2) for i in range(10))
        [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]

-2: time difference:
start = time.time()
...
end = time.time()
print(end - start)
















USEFUL CODES:
-1: https://joblib.readthedocs.io/en/latest/generated/joblib.Parallel.html
        example:

        from joblib import Parallel, delayed

        Parallel(n_jobs=1)(delayed(sqrt)(i**2) for i in range(10))
        [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]

-2: time difference:
start = time.time()
...
end = time.time()
print(end - start)
